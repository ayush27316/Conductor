package com.conductor.port.payment;

import com.conductor.port.payment.exception.*;
import com.conductor.port.payment.model.ChargeRequest;
import com.conductor.port.payment.model.ChargeResponse;
import com.conductor.port.payment.model.PaymentEvent;
import jakarta.servlet.http.HttpServletRequest;

/**
 * PaymentHandler defines the contract for integrating payment gateways
 */
public interface PaymentHandler {

    /**
     * Handles an incoming client payment request (e.g., POST /payment).
     *
     * The request is routed to the correct adapter implementation, which
     * processes the payment using its provider-specific logic.
     *
     * @param request the incoming client HTTP request containing payment details
     * @return An HTTP response to send back to the client
     * @throws
     */
    ChargeResponse charge(ChargeRequest request)
            throws InvalidPaymentRequestException,
            PaymentProviderException,
            PayInRequestFailedException;

    /**
     * Called after the core application generates a webhook endpoint URL
     * for this payment adapter.
     *
     * Implementations can use this method to register the webhook URL
     * with the payment provider (e.g., tell Stripe/Square where to send events).
     *
     * @param url the webhook URL generated by the core
     * @throws {@link WebhookRegistrationFailedException} if registration fails
     */
    void registerWebhook(String url) throws WebhookRegistrationFailedException;

    /**
     * Handles incoming webhook events from the payment provider.
     *
     * This method is invoked for requests targeting the webhook URL
     * registered via {@link #registerWebhook(String)}.
     *
     * Responsibilities:
     *  - Authenticate the webhook request
     *  - Convert the provider-specific payload into a standard {@link PaymentEvent}
     *  - Return the normalized event for the core application to process
     *    (e.g., update database, trigger notifications)
     *
     * @param request the incoming webhook HTTP request
     * @return the normalized payment event extracted from the webhook
     */
    PaymentEvent getPaymentEventFromWebhookRequest(HttpServletRequest request)
            throws WebhookAuthenticationException,
            PaymentProviderException;


}
